@page "/addExpense"
@attribute [Authorize]


@using BlazorExpenseTracker.Model
@using BlazorExpenseTracker.Services.Data;
@using System.Globalization;
@using Toolbelt.Blazor.SpeechRecognition 

@inject NavigationManager _navigationManager
@inject ICategoryDataService _categoryDataService;
@inject IPaymentTypeDataService _paymentTypeDataService;
@inject IExpenseDataService _expenseDataService;
@inject AuthenticationStateProvider _authenticationStateProvider
@inject SpeechRecognition _speechRecognition
@inject IJSRuntime js

@implements IDisposable



<PageTitle>Expense Tracker - Add</PageTitle>

<EditForm Model="@newExpense" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardHeader style="font-size:25px;">Add Expense</MudCardHeader>

                <MudCardContent>
                    <MudDatePicker Label="Date"  @bind-Date="_defaultDate" @bind-Value="newExpense.Date"  />
                    <MudTextField Label="Value" Class="mt-3" Culture="@_ptBR" @bind-Value="newExpense.Value" AutoFocus="true" />

                    <MudSelect T="string" Label="Category" Class="mt-3" @bind-Value="newExpense.Category">
                        @if (categoryList != null)
                        {
                            foreach (var category in categoryList)
                            {
                                <MudSelectItem Value="@category.Name">@category.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                    <MudSelect T="string" Label="Payment Type" Class="mt-3" @bind-Value="newExpense.PaymentType">
                        @if (paymentTypeList != null)
                        {
                            foreach (var paymentType in paymentTypeList)
                            {
                                <MudSelectItem Value="@paymentType.Name">@paymentType.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                    <MudTextField Label="Description" Class="mt-3" @bind-Value="newExpense.Description" />
                </MudCardContent>

                <MudCardActions>
                    <MudIconButton Icon="@Icons.Material.Filled.Mic" ButtonType="ButtonType.Button" Variant="Variant.Outlined" OnClick="StartSpeech" IconColor="Color.Primary" IconClass="Mic" Color="Color.Primary" />

                    <ValidationSummary />
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save</MudButton>                    
                </MudCardActions>

            </MudCard>
        </MudItem>

    </MudGrid>     

</EditForm>



@code 
{
    private CultureInfo _ptBR = CultureInfo.GetCultureInfo("pt-BR");
    private DateTime? _defaultDate = DateTime.Today;

    private Expense newExpense = new Expense()
    {
        Date = DateTime.Now
    };

    private IList<Category>? categoryList;
    private IList<PaymentType>? paymentTypeList;

    protected override async Task OnInitializedAsync()
    {
        categoryList = await _categoryDataService.GetCategoriesAsync();
        paymentTypeList = await _paymentTypeDataService.GetPaymentTypesAsync();
    }

    private async Task HandleValidSubmit()
    {        
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();        
        newExpense.UserName = authState.User?.Identity?.Name;

        await _expenseDataService.AddExpenseAsync(newExpense);

        _navigationManager.NavigateTo("/listExpenses/expenseSavedFlagValue");
    }


    // Speech Recognition

    async Task StartSpeech()
    {
        _speechRecognition.Lang = "pt-BR";        
        await _speechRecognition.StartAsync();
    }

    protected override void OnInitialized()
    {
        _speechRecognition.Result += OnSpeechRecognized;
    }

    void OnSpeechRecognized(object? sender, SpeechRecognitionEventArgs args)
    {
        try
        {
            SpeechRecognitionResult? result = args?.Results?[0];
            if (result != null)
            {
                var text = result.Items?[0].Transcript;

                if (text !=null)
                {
                    var items = text.Split(" ");
                    newExpense.Value = items?.Length > 0 ? decimal.Parse(items[0]) : newExpense.Value;
                    newExpense.Category = items?.Length > 1 ? FirstCharToUpper(items?[1]) : newExpense.Category;
                    newExpense.PaymentType = items?.Length > 2 ? FirstCharToUpper(items?[2]) : newExpense.PaymentType;
                    newExpense.Description = items?.Length > 3 ? FirstCharToUpper(items?[3]) : newExpense.Description;
                }
            }                        
        }
        catch (Exception ex)
        {
            js.InvokeVoidAsync("alert", "Error on speech recognization : " + ex.Message).GetAwaiter().GetResult();
        }

        StateHasChanged();
    }

    private static string FirstCharToUpper(string? input) => string.IsNullOrWhiteSpace(input) ? string.Empty : (input.First().ToString().ToUpper() + String.Join("", input.Skip(1)));
        

    public void Dispose()
    {
        _speechRecognition.Result -= OnSpeechRecognized;
    }

}

