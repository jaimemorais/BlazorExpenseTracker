@page "/"
@using System.Security.Claims;
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider _authenticationStateProvider

<PageTitle>Home</PageTitle>


<MudGrid hidden="@(!loggedIn)">
    <MudItem xs="12" sm="5">
        <MudCard>

            <MudCardContent style="text-align:center;">
                <h2 style="padding-left:5px;color:#2196f3">Hello <span style="font-weight:bold">@givenName</span> !</h2>
                <br /><br />
                <img src="puppy.gif" width="180" />   
                <br /><br />
                <br /><br />
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" Link="/addExpense">+ Add New Expense</MudButton>                
                <br /><br />
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" Link="/listExpenses">View Expenses</MudButton>
            </MudCardContent>

        </MudCard>
    </MudItem>
</MudGrid>





@code {
    private bool loggedIn = false;
    private string? givenName;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            givenName = user.Claims.FirstOrDefault(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname")?.Value;
            claims = user.Claims;
            loggedIn = true;
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }
}