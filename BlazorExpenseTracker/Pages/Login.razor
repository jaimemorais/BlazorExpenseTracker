@page "/login"
@using BlazorExpenseTracker.Services.Auth;
@using BlazorExpenseTracker.Model
@using BlazorExpenseTracker.Services
@using System.Security.Claims;
@inject IJSRuntime js
@inject NavigationManager _navigationManager
@inject IAuthorizationService _authorizationService
@inject IExpTrackerAuthService _expTrackerAuthService
@inject ProtectedSessionStorage _protectedSessionStorage
@inject AuthenticationStateProvider _authenticationStateProvider

<PageTitle>Expense Tracker - Login</PageTitle>

<MudGrid>
    <MudItem xs="12" sm="5">
        <MudCard>

            <MudCardHeader style="font-size:25px;">Login</MudCardHeader>

            <MudCardContent>
                <MudTextField Label="Username" Class="mt-3" @bind-Value="username" AutoFocus="true" />
                <MudTextField Label="Password" Class="mt-3" @bind-Value="password" InputType="InputType.Password" />
            </MudCardContent>

            <MudCardActions>                    
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="ExecuteLogin">Login</MudButton>
            </MudCardActions>

        </MudCard>
    </MudItem>
</MudGrid>

@code {
    string username = "";
    string password = "";

    private async Task ExecuteLogin()
    {
        var expTrackerUser = await _expTrackerAuthService.LoginAsync(username, password);

        if (expTrackerUser != null)
        {
            var expTrackerAuthStateProvider = (ExpTrackerAuthenticationStateProvider)_authenticationStateProvider;
            await expTrackerAuthStateProvider.UpdateAuthenticationState(new ExpTrackerUserSession(expTrackerUser.Username, expTrackerUser.GivenName, expTrackerUser.Role));            
            _navigationManager.NavigateTo("/", true);            
        }
        else
        {
            await js.InvokeVoidAsync("alert", "Invalid user name or password.");
        }
    }

}
