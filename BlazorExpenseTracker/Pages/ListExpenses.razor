@page "/listExpenses"
@page "/listExpenses/{expenseSavedFlag}"
@attribute [Authorize]

@using BlazorExpenseTracker.Model;
@using BlazorExpenseTracker.Services.Data;
@inject IExpenseDataService _expensesDataService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager


<PageTitle>Expense Tracker - My Expenses</PageTitle>


<div hidden="@puppyGifHidden" style="position:fixed;width:100%;height:100%;z-index:1;"><img src="hi5dog.gif" /></div>

<MudLink Href="/addExpense" Color="Color.Primary" Class="ml-auto" Style="display:table">Add New Expense</MudLink>

<br /><br/>


@if (expenses == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <MudTable FixedHeader="true" Items="@expenses" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@(expenses == null)" LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh>Date</MudTh>
            <MudTh>Value</MudTh>
            <MudTh>Category</MudTh>
            <MudTh>Payment Type</MudTh>
            <MudTh>Description</MudTh>
            <MudTh></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Date">@context.Date.ToShortDateString()</MudTd>
            <MudTd DataLabel="Value">@context.Value</MudTd>
            <MudTd DataLabel="Category">@context.Category</MudTd>
            <MudTd DataLabel="PaymentType">@context.PaymentType</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd><a class="oi oi-pencil" href="/editExpense/@context.Id"></a></MudTd>
            <MudTd><a class="oi oi-trash" @onclick="@(async () => await DeleteItem(context.Id))" /></MudTd>
        </RowTemplate>
    </MudTable>

}


@code 
{
    [Parameter]
    public string ExpenseSavedFlag { get; set; } = string.Empty;
    bool puppyGifHidden = true;

    private IList<Expense>? expenses;

    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        puppyGifHidden = true;
    }

    protected override async Task OnInitializedAsync()
    {
        if (ExpenseSavedFlag == "expenseSavedFlagValue")
        {
            puppyGifHidden = false;
            await Task.Delay(2000);     
        }

        await LoadExpensesAsync();
    }

    private async Task LoadExpensesAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var data = await _expensesDataService.GetExpenseListAsync(authState.User?.Identity?.Name, DateOnly.FromDateTime(DateTime.Now.AddDays(-5)));
        expenses = data.OrderByDescending(d => d.Date).ToList();
    }


    private async Task DeleteItem(string? expenseId) 
    {
        if (expenseId != null)
        {
            await _expensesDataService.DeleteExpenseAsync(expenseId);
            await LoadExpensesAsync();
        }
    }



}
